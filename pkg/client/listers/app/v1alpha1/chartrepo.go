/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/alauda/helm-crds/pkg/apis/app/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChartRepoLister helps list ChartRepos.
type ChartRepoLister interface {
	// List lists all ChartRepos in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ChartRepo, err error)
	// ChartRepos returns an object that can list and get ChartRepos.
	ChartRepos(namespace string) ChartRepoNamespaceLister
	ChartRepoListerExpansion
}

// chartRepoLister implements the ChartRepoLister interface.
type chartRepoLister struct {
	indexer cache.Indexer
}

// NewChartRepoLister returns a new ChartRepoLister.
func NewChartRepoLister(indexer cache.Indexer) ChartRepoLister {
	return &chartRepoLister{indexer: indexer}
}

// List lists all ChartRepos in the indexer.
func (s *chartRepoLister) List(selector labels.Selector) (ret []*v1alpha1.ChartRepo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChartRepo))
	})
	return ret, err
}

// ChartRepos returns an object that can list and get ChartRepos.
func (s *chartRepoLister) ChartRepos(namespace string) ChartRepoNamespaceLister {
	return chartRepoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChartRepoNamespaceLister helps list and get ChartRepos.
type ChartRepoNamespaceLister interface {
	// List lists all ChartRepos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ChartRepo, err error)
	// Get retrieves the ChartRepo from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ChartRepo, error)
	ChartRepoNamespaceListerExpansion
}

// chartRepoNamespaceLister implements the ChartRepoNamespaceLister
// interface.
type chartRepoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChartRepos in the indexer for a given namespace.
func (s chartRepoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChartRepo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChartRepo))
	})
	return ret, err
}

// Get retrieves the ChartRepo from the indexer for a given namespace and name.
func (s chartRepoNamespaceLister) Get(name string) (*v1alpha1.ChartRepo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("chartrepo"), name)
	}
	return obj.(*v1alpha1.ChartRepo), nil
}
