/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/alauda/helm-crds/pkg/apis/app/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HelmRequestLister helps list HelmRequests.
type HelmRequestLister interface {
	// List lists all HelmRequests in the indexer.
	List(selector labels.Selector) (ret []*v1.HelmRequest, err error)
	// HelmRequests returns an object that can list and get HelmRequests.
	HelmRequests(namespace string) HelmRequestNamespaceLister
	HelmRequestListerExpansion
}

// helmRequestLister implements the HelmRequestLister interface.
type helmRequestLister struct {
	indexer cache.Indexer
}

// NewHelmRequestLister returns a new HelmRequestLister.
func NewHelmRequestLister(indexer cache.Indexer) HelmRequestLister {
	return &helmRequestLister{indexer: indexer}
}

// List lists all HelmRequests in the indexer.
func (s *helmRequestLister) List(selector labels.Selector) (ret []*v1.HelmRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelmRequest))
	})
	return ret, err
}

// HelmRequests returns an object that can list and get HelmRequests.
func (s *helmRequestLister) HelmRequests(namespace string) HelmRequestNamespaceLister {
	return helmRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelmRequestNamespaceLister helps list and get HelmRequests.
type HelmRequestNamespaceLister interface {
	// List lists all HelmRequests in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.HelmRequest, err error)
	// Get retrieves the HelmRequest from the indexer for a given namespace and name.
	Get(name string) (*v1.HelmRequest, error)
	HelmRequestNamespaceListerExpansion
}

// helmRequestNamespaceLister implements the HelmRequestNamespaceLister
// interface.
type helmRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelmRequests in the indexer for a given namespace.
func (s helmRequestNamespaceLister) List(selector labels.Selector) (ret []*v1.HelmRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelmRequest))
	})
	return ret, err
}

// Get retrieves the HelmRequest from the indexer for a given namespace and name.
func (s helmRequestNamespaceLister) Get(name string) (*v1.HelmRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("helmrequest"), name)
	}
	return obj.(*v1.HelmRequest), nil
}
